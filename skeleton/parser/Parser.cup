package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

import ast.*;
import interpreter.Interpreter;

parser code {: 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }
:};

terminal PLUS, MINUS, TIMES, LPAREN, RPAREN, LBRACE, RBRACE, SEMICOLON, EQ, COMMA;
terminal IF, ELSE, WHILE, PRINT, RETURN, INT;
terminal LEQ, GEQ, EQEQ, NEQ, LT, GT, AND, OR, NOT;
terminal Long INTCONST;
terminal String IDENT;
terminal UMINUS;

non terminal Program         program;
non terminal List<Stmt>      stmtList;
non terminal Stmt            stmt;
non terminal VarDecl         varDecl;
non terminal Expr            expr;
non terminal Stmt            ifStmt;
non terminal List<FuncDef>   funcDefList;
non terminal FuncDef         funcDef;
non terminal List<VarDecl>   paramList;
non terminal List<Expr>      exprList;

precedence left OR;
precedence left AND;
precedence left EQEQ, NEQ;
precedence left LT, GT, LEQ, GEQ;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence right NOT, UMINUS;
precedence left LPAREN;
precedence nonassoc IF;
precedence nonassoc ELSE;

program ::= funcDefList:fl
            {: RESULT = new Program(fl, loc(flleft, flright)); :}
         ;

funcDefList ::= funcDef:fd funcDefList:fl
                {: fl.add(0, fd); RESULT = fl; :}
              | funcDef:fd
                {: List<FuncDef> list = new ArrayList<>(); list.add(fd); RESULT = list; :}
              ;

funcDef ::= INT IDENT:name LPAREN paramList:params RPAREN LBRACE stmtList:body RBRACE
            {: RESULT = new FuncDef(name, params, body, loc(nameleft, nameright)); :}
          ;

paramList ::= INT IDENT:param COMMA paramList:pl
              {: pl.add(0, new VarDecl(param, null, loc(paramleft, paramright))); RESULT = pl; :}
            | INT IDENT:param
              {: List<VarDecl> params = new ArrayList<>();
                 params.add(new VarDecl(param, null, loc(paramleft, paramright)));
                 RESULT = params; :}
            | /* empty */
              {: RESULT = new ArrayList<>(); :}
            ;

stmtList ::= stmt:s stmtList:sl
             {: sl.add(0, s); RESULT = sl; :}
           | /* empty */
             {: RESULT = new ArrayList<>(); :}
           ;

stmt ::= varDecl:vd SEMICOLON
         {: RESULT = vd; :}
      |  PRINT expr:e SEMICOLON
         {: RESULT = new PrintStmt(e, loc(eleft, eright)); :}
      |  ifStmt:i
         {: RESULT = i; :}
      |  WHILE LPAREN expr:c RPAREN stmt:s
         {: RESULT = new WhileStmt(c, s, loc(cleft, cright)); :}
      |  RETURN expr:e SEMICOLON
         {: RESULT = new ReturnStmt(e, loc(eleft, eright)); :}
      |  LBRACE stmtList:sl RBRACE
         {: RESULT = new BlockStmt(sl, loc(slleft, slright)); :}
      |  IDENT:name LPAREN exprList:args RPAREN SEMICOLON
         {: RESULT = new CallStmt(name, args, loc(nameleft, nameright)); :}
      ;

ifStmt ::= IF LPAREN expr:c RPAREN stmt:s
           {: RESULT = new IfStmt(c, s, null, loc(cleft, cright)); :}
         | IF LPAREN expr:c RPAREN stmt:s1 ELSE stmt:s2
           {: RESULT = new IfStmt(c, s1, s2, loc(cleft, cright)); :}
         ;

varDecl ::= INT IDENT:id EQ expr:e
            {: RESULT = new VarDecl(id, e, loc(idleft, idright)); :}
         ;

expr ::= INTCONST:c
         {: RESULT = new ConstExpr(c, loc(cleft, cright)); :}
      |  IDENT:id
         {: RESULT = new VarExpr(id, loc(idleft, idright)); :}
      |  expr:e1 PLUS expr:e2
         {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); :}
      |  expr:e1 MINUS expr:e2
         {: RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e1right)); :}
      |  expr:e1 TIMES expr:e2
         {: RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2, loc(e1left, e1right)); :}
      |  MINUS expr:e
         {: RESULT = new UnaryExpr(UnaryExpr.MINUS, e, loc(eleft, eright)); :}
         %prec UMINUS
      |  LPAREN expr:e RPAREN
         {: RESULT = e; :}
      |  IDENT:name LPAREN exprList:args RPAREN
         {: RESULT = new CallExpr(name, args, loc(nameleft, nameright)); :}
      |  expr:e1 LT expr:e2
         {: RESULT = new BinaryExpr(e1, BinaryExpr.LT, e2, loc(e1left, e1right)); :}
      |  expr:e1 GT expr:e2
         {: RESULT = new BinaryExpr(e1, BinaryExpr.GT, e2, loc(e1left, e1right)); :}
      |  expr:e1 LEQ expr:e2
         {: RESULT = new BinaryExpr(e1, BinaryExpr.LEQ, e2, loc(e1left, e1right)); :}
      |  expr:e1 GEQ expr:e2
         {: RESULT = new BinaryExpr(e1, BinaryExpr.GEQ, e2, loc(e1left, e1right)); :}
      |  expr:e1 EQEQ expr:e2
         {: RESULT = new BinaryExpr(e1, BinaryExpr.EQEQ, e2, loc(e1left, e1right)); :}
      |  expr:e1 NEQ expr:e2
         {: RESULT = new BinaryExpr(e1, BinaryExpr.NEQ, e2, loc(e1left, e1right)); :}
      |  expr:e1 AND expr:e2
         {: RESULT = new BinaryExpr(e1, BinaryExpr.AND, e2, loc(e1left, e1right)); :}
      |  expr:e1 OR expr:e2
         {: RESULT = new BinaryExpr(e1, BinaryExpr.OR, e2, loc(e1left, e1right)); :}
      |  NOT expr:e
         {: RESULT = new UnaryExpr(UnaryExpr.NOT, e, loc(eleft, eright)); :}
      ;

exprList ::= expr:e COMMA exprList:el
             {: el.add(0, e); RESULT = el; :}
           | expr:e
             {: List<Expr> list = new ArrayList<>(); list.add(e); RESULT = list; :}
           | /* empty */
             {: RESULT = new ArrayList<>(); :}
           ;